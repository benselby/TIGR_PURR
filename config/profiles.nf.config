// Dynamic queue allocation functions
def timedur(x){
    return new TimeDuration(*x.split(':').collect{it.toInteger()}, 0)
}

def get_queue(w, mapping){
    // [String : String] --> [TimeDuration : String]
    td_mapping = mapping.collectEntries{k,v -> [timedur(k), v]}
    td_w = timedur(w)
    ps = td_mapping.grep{it.key >= td_w}.sort{it.key}
    return ps.first().value
}

profiles {

    kimel {

        params.cluster_queue = {s->"high-moby"}
        process.executor = "SLURM"
        params.simg = "$params.simg"
        params.invocation= "$params.invocation"
        params.descriptor = "$params.descriptor"
        params.license = "$license"
        params.scratchDir = "/tmp/"
    }

    scc {

        partition_map = ["12:00:00": "short",
                        "1:00:00:00": "medium",
                        "2:00:00:00": "long",
                        "166:00:00:00": "verylong"]

        params.cluster_queue = { s -> get_queue(params.cluster_time(s),
                                                partition_map)
                               }

        process.executor = "SLURM"
        params.simg = "/KIMEL/tigrlab/$params.simg"
        params.invocation= "/KIMEL/tigrlab/$params.invocation"
        params.descriptor = "/KIMEL/tigrlab/$params.descriptor"
        params.license = "/KIMEL/quarantine/$params.license"
        params.scratchDir = "/export/ramdisk/"


    }

    local {
        params.cluster_queue = {s->""}
        process.executor = "local"
        process.maxForks = 4
        params.simg = "$params.simg"
        params.invocation= "$params.invocation"
        params.descriptor = "$params.descriptor"
        params.license = "$params.license"
        params.scratchDir = "/tmp/"

    }


}
