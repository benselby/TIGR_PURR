import groovy.time.TimeDuration

// Dynamic queue allocation functions
def timedur(x){
    return new TimeDuration(*x.split(':').collect{it.toInteger()}, 0)
}

def get_queue(w, mapping){
    // [String : String] --> [TimeDuration : String]
    td_mapping = mapping.collectEntries{k,v -> [timedur(k), v]}
    td_w = timedur(w)
    ps = td_mapping.grep{it.key >= td_w}.sort{it.key}
    return ps.first().value
}

if (!(cluster_time instanceof Closure)){
    params.cluster_time = { s -> cluster_time }
}else{
    params.cluster_time = cluster_time
}

singularity {

    autoMounts=true
    enabled=true

}

params.application = "$application"
params.version = "$version"
params.out="$baseDir"


retry_val=3
license="/freesurfer/6.0.0/build/"

profiles {

    //DEFAULT
    standard {

        params.cluster_queue = {s->"high-moby"}
        process.executor = "SLURM"
        process.queue = "high-moby"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"
    }

    kimel {

        params.cluster_queue = {s->"high-moby"}
        process.executor = "SLURM"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"
    }

    scc {

        partition_map = ["12:00:00": "short",
                        "1:00:00:00": "medium",
                        "2:00:00:00": "long",
                        "166:00:00:00": "verylong"]

        params.cluster_queue = { s -> get_queue(params.cluster_time(s),
                                                partition_map)
                               }

        process.executor = "SLURM"
        params.simg = "/KIMEL/tigrlab/$simg"
        params.invocation= "/KIMEL/tigrlab/$invocation"
        params.descriptor = "/KIMEL/tigrlab/$descriptor"
        params.license = "/KIMEL/quarantine/$license"
        params.scratchDir = "/export/ramdisk/"


    }

    local {
        params.cluster_queue = {s->""}
        process.executor = "local"
        process.maxForks = 4
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
        params.scratchDir = "/tmp/"

    }


}

includeConfig './report_invocation.nf.config'

process {

    withName: modify_invocation{
        executor = 'local'
    }

    withName: save_invocation {
        executor="local"
    }

    withName: run_bids {
        maxRetries = retry_val
        errorStrategy = {task.attempt == retry_val ? "finish" : "retry"}
        clusterOptions = "--mem-per-cpu=$cluster_mem_cpu\
         --cpus-per-task=$cluster_cpus --job-name ${application}_${version}\
         --nodes=1"
    }
}
