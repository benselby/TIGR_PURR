singularity {

    autoMounts=true
    enabled=true

}


// Check if input time is greater than comparator
def time_is_greater(walltime, comparator){

    int wt = walltime.replace(":","").toInteger()
    int cp = comparator.replace(":","").toInteger()
    return (wt > cp)

}

def get_partition(walltime, pmap){

    partition = pmap.grep{time_is_greater(walltime, it.key)}
    return partition[0].value

}

params.application = "$application"
params.version = "$version"
params.out="$baseDir"
retry_val=3
license="/freesurfer/6.0.0/build/"

profiles {

    standard {

        process.executor = "SLURM"
        process.queue = "high-moby"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
    }

    kimel {

        process.executor = "SLURM"
        process.queue = "high-moby"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"
    }

    scc {

        // Implement partition sorting
        pmap = ["12:00:00":"short",
                "1:00:00:00": "medium",
                "2:00:00:00": "long",
                "166:00:00:00": "verylong"
                ]
        params.pmap = pmap
        partition = get_partition(cluster_time, pmap)

        process.executor = "SLURM"
        process.queue = partition
        params.simg = "/KIMEL/tigrlab/$simg"
        params.invocation= "/KIMEL/tigrlab/$invocation"
        params.descriptor = "/KIMEL/tigrlab/$descriptor"
        params.license = "/KIMEL/quarantine/$license"

    }

    local {
        process.executor = "local"
        params.simg = "$simg"
        params.invocation= "$invocation"
        params.descriptor = "$descriptor"
        params.license = "/opt/quarantine/$license"

    }


}

includeConfig './report_invocation.nf.config'

process {

    withName: modify_invocation{
        executor = 'local'
    }

    withName: save_invocation {
        executor="local"
    }

    withName: run_bids {
        maxRetries = retry_val
        errorStrategy = {task.attempt == retry_val ? "finish" : "retry"}
        time = cluster_time
        cpus = cluster_cpus
        clusterOptions = "--mem-per-cpu=$cluster_mem_cpu\
         --job-name ${application}_${version}\
         --nodes=1"
    }
}
